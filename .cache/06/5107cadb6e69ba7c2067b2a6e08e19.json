{"id":"../../node_modules/mongoose/lib/cast/boolean.js","dependencies":[{"name":"/Users/orgil/Documents/repos/erxes-integrations/package.json","includedInParent":true,"mtime":1561440176171},{"name":"/Users/orgil/Documents/repos/erxes-integrations/node_modules/mongoose/package.json","includedInParent":true,"mtime":1560229638891},{"name":"../error/cast","loc":{"line":3,"column":26},"parent":"/Users/orgil/Documents/repos/erxes-integrations/node_modules/mongoose/lib/cast/boolean.js","resolved":"/Users/orgil/Documents/repos/erxes-integrations/node_modules/mongoose/lib/error/cast.js"}],"generated":{"js":"'use strict';\n\nconst CastError = require('../error/cast');\n/*!\n * Given a value, cast it to a boolean, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {CastError} if `value` is not one of the allowed values\n * @api private\n */\n\n\nmodule.exports = function castBoolean(value, path) {\n  if (value == null) {\n    return value;\n  }\n\n  if (module.exports.convertToTrue.has(value)) {\n    return true;\n  }\n\n  if (module.exports.convertToFalse.has(value)) {\n    return false;\n  }\n\n  throw new CastError('boolean', value, path);\n};\n\nmodule.exports.convertToTrue = new Set([true, 'true', 1, '1', 'yes']);\nmodule.exports.convertToFalse = new Set([false, 'false', 0, '0', 'no']);"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":0}},{"name":"CastError","generated":{"line":3,"column":6},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":6}},{"generated":{"line":3,"column":15},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":15}},{"name":"require","generated":{"line":3,"column":18},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":18}},{"generated":{"line":3,"column":25},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":25}},{"generated":{"line":3,"column":26},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":26}},{"generated":{"line":3,"column":41},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":25}},{"generated":{"line":3,"column":42},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":5,"column":0}},{"name":"module","generated":{"line":16,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":0}},{"generated":{"line":16,"column":6},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":6}},{"name":"exports","generated":{"line":16,"column":7},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":7}},{"generated":{"line":16,"column":14},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":0}},{"generated":{"line":16,"column":17},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":17}},{"name":"castBoolean","generated":{"line":16,"column":26},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":26}},{"generated":{"line":16,"column":37},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":17}},{"name":"value","generated":{"line":16,"column":38},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":38}},{"generated":{"line":16,"column":43},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":17}},{"name":"path","generated":{"line":16,"column":45},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":45}},{"generated":{"line":16,"column":49},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":17}},{"generated":{"line":16,"column":51},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":51}},{"generated":{"line":17,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":17,"column":2}},{"name":"value","generated":{"line":17,"column":6},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":17,"column":6}},{"generated":{"line":17,"column":11},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":17,"column":11}},{"generated":{"line":17,"column":15},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":17,"column":15}},{"generated":{"line":17,"column":19},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":17,"column":2}},{"generated":{"line":17,"column":21},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":17,"column":21}},{"generated":{"line":18,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":18,"column":4}},{"name":"value","generated":{"line":18,"column":11},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":18,"column":11}},{"generated":{"line":18,"column":16},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":18,"column":4}},{"generated":{"line":19,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":19,"column":3}},{"generated":{"line":21,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":2}},{"name":"module","generated":{"line":21,"column":6},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":6}},{"generated":{"line":21,"column":12},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":12}},{"name":"exports","generated":{"line":21,"column":13},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":13}},{"generated":{"line":21,"column":20},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":6}},{"name":"convertToTrue","generated":{"line":21,"column":21},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":21}},{"generated":{"line":21,"column":34},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":6}},{"name":"has","generated":{"line":21,"column":35},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":35}},{"generated":{"line":21,"column":38},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":6}},{"name":"value","generated":{"line":21,"column":39},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":39}},{"generated":{"line":21,"column":44},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":6}},{"generated":{"line":21,"column":45},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":2}},{"generated":{"line":21,"column":47},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":21,"column":47}},{"generated":{"line":22,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":22,"column":4}},{"generated":{"line":22,"column":11},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":22,"column":11}},{"generated":{"line":22,"column":15},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":22,"column":4}},{"generated":{"line":23,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":23,"column":3}},{"generated":{"line":25,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":2}},{"name":"module","generated":{"line":25,"column":6},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":6}},{"generated":{"line":25,"column":12},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":12}},{"name":"exports","generated":{"line":25,"column":13},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":13}},{"generated":{"line":25,"column":20},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":6}},{"name":"convertToFalse","generated":{"line":25,"column":21},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":21}},{"generated":{"line":25,"column":35},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":6}},{"name":"has","generated":{"line":25,"column":36},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":36}},{"generated":{"line":25,"column":39},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":6}},{"name":"value","generated":{"line":25,"column":40},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":40}},{"generated":{"line":25,"column":45},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":6}},{"generated":{"line":25,"column":46},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":2}},{"generated":{"line":25,"column":48},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":24,"column":48}},{"generated":{"line":26,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":25,"column":4}},{"generated":{"line":26,"column":11},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":25,"column":11}},{"generated":{"line":26,"column":16},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":25,"column":4}},{"generated":{"line":27,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":26,"column":3}},{"generated":{"line":29,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":2}},{"generated":{"line":29,"column":8},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":8}},{"name":"CastError","generated":{"line":29,"column":12},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":12}},{"generated":{"line":29,"column":21},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":8}},{"generated":{"line":29,"column":22},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":22}},{"generated":{"line":29,"column":31},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":8}},{"name":"value","generated":{"line":29,"column":33},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":33}},{"generated":{"line":29,"column":38},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":8}},{"name":"path","generated":{"line":29,"column":40},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":40}},{"generated":{"line":29,"column":44},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":8}},{"generated":{"line":29,"column":45},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":27,"column":2}},{"generated":{"line":30,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":28,"column":1}},{"generated":{"line":30,"column":1},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":16,"column":0}},{"name":"module","generated":{"line":32,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":0}},{"generated":{"line":32,"column":6},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":6}},{"name":"exports","generated":{"line":32,"column":7},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":7}},{"generated":{"line":32,"column":14},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":0}},{"name":"convertToTrue","generated":{"line":32,"column":15},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":15}},{"generated":{"line":32,"column":28},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":0}},{"generated":{"line":32,"column":31},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":31}},{"name":"Set","generated":{"line":32,"column":35},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":35}},{"generated":{"line":32,"column":38},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":31}},{"generated":{"line":32,"column":39},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":39}},{"generated":{"line":32,"column":40},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":40}},{"generated":{"line":32,"column":44},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":39}},{"generated":{"line":32,"column":46},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":46}},{"generated":{"line":32,"column":52},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":39}},{"generated":{"line":32,"column":54},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":54}},{"generated":{"line":32,"column":55},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":39}},{"generated":{"line":32,"column":57},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":57}},{"generated":{"line":32,"column":60},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":39}},{"generated":{"line":32,"column":62},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":62}},{"generated":{"line":32,"column":67},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":39}},{"generated":{"line":32,"column":68},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":31}},{"generated":{"line":32,"column":69},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":30,"column":0}},{"name":"module","generated":{"line":33,"column":0},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":0}},{"generated":{"line":33,"column":6},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":6}},{"name":"exports","generated":{"line":33,"column":7},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":7}},{"generated":{"line":33,"column":14},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":0}},{"name":"convertToFalse","generated":{"line":33,"column":15},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":15}},{"generated":{"line":33,"column":29},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":0}},{"generated":{"line":33,"column":32},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":32}},{"name":"Set","generated":{"line":33,"column":36},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":36}},{"generated":{"line":33,"column":39},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":32}},{"generated":{"line":33,"column":40},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":40}},{"generated":{"line":33,"column":41},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":41}},{"generated":{"line":33,"column":46},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":40}},{"generated":{"line":33,"column":48},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":48}},{"generated":{"line":33,"column":55},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":40}},{"generated":{"line":33,"column":57},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":57}},{"generated":{"line":33,"column":58},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":40}},{"generated":{"line":33,"column":60},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":60}},{"generated":{"line":33,"column":63},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":40}},{"generated":{"line":33,"column":65},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":65}},{"generated":{"line":33,"column":69},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":40}},{"generated":{"line":33,"column":70},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":32}},{"generated":{"line":33,"column":71},"source":"../../node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":0}}],"sources":{"../../node_modules/mongoose/lib/cast/boolean.js":"'use strict';\n\nconst CastError = require('../error/cast');\n\n/*!\n * Given a value, cast it to a boolean, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {CastError} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castBoolean(value, path) {\n  if (value == null) {\n    return value;\n  }\n\n  if (module.exports.convertToTrue.has(value)) {\n    return true;\n  }\n  if (module.exports.convertToFalse.has(value)) {\n    return false;\n  }\n  throw new CastError('boolean', value, path);\n};\n\nmodule.exports.convertToTrue = new Set([true, 'true', 1, '1', 'yes']);\nmodule.exports.convertToFalse = new Set([false, 'false', 0, '0', 'no']);\n"},"lineCount":null}},"error":null,"hash":"e4d989531288c971030680d07e36cc12","cacheData":{"env":{}}}